<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" 
	xmlns:lib="https://github.com/Benjamin-TP/Library/"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

	<xsl:output method="text" encoding="UTF-8"/>
  
	<xsl:template match="/">
		<xsl:text>{        
		"ComicBookSeries": [
		</xsl:text>
		<xsl:apply-templates select="//lib:COMICBOOKSERIE">
			<xsl:sort select="lib:TITLE" order="ascending"/>
	</xsl:apply-templates>
	<xsl:text>     
		]}
	</xsl:text>
	</xsl:template>


	<xsl:template match="lib:COMICBOOKSERIE">
		<xsl:variable name="id_cbserie" select="@idCBS"/>
		
		<xsl:text>{"SerieTitle": "</xsl:text><xsl:value-of select="lib:TITLE"/> <xsl:text>",</xsl:text>
		<xsl:text> "SerieDescription": "</xsl:text><xsl:value-of select="lib:DESCRIPTION"/> <xsl:text>",</xsl:text>
		<xsl:text> "NrOfVolumes": </xsl:text><xsl:value-of select="lib:NROFVOLUMES"/> <xsl:text>,</xsl:text>
		
		<xsl:text>        
			"Comics": [
		</xsl:text>
		
		<xsl:apply-templates select="../../lib:BOOKS/lib:BOOK">
			<xsl:with-param name="id_cbserie" select="$id_cbserie" />
			<xsl:sort select="lib:RELEASEDATE" order="ascending"/>
		</xsl:apply-templates>
				
		<xsl:text>     
			]
		</xsl:text>
		
		<xsl:choose>
			<!--If the current node is the last one, hence end of list (hence, no comma)-->
			<xsl:when test="position()!=last()">
				<xsl:text>},</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>}</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
	
	<xsl:template match="lib:BOOK">
	
		<xsl:param name="id_cbserie"/>
		
		<xsl:if test="lib:COMICBOOKSER/@idCBSRef = $id_cbserie">
			
			<xsl:text>{"Title": "</xsl:text><xsl:value-of select="lib:TITLE"/> <xsl:text>",</xsl:text>
			<xsl:text> "ISBN": "</xsl:text><xsl:value-of select="lib:ISBN"/> <xsl:text>",</xsl:text>
			<xsl:text> "ReleaseDate": "</xsl:text><xsl:value-of select="lib:RELEASEDATE"/> <xsl:text>",</xsl:text>
			<xsl:text> "Authors": [ </xsl:text>
				
			<xsl:apply-templates select="lib:BOOKAUTHORS/lib:BOOKAUTHOR"/>

			<xsl:text> ] }, </xsl:text>
			
		</xsl:if>
		
	</xsl:template>


	<!--For the AUTHOR and ROLE templates, 
	the opening and closing curling brackets (for BOOKAUTHOR) and square brackets (for ROLE) are managed directly in the below BOOKAUTHOR template.
	Indeed,
	For BOOKAUTHOR: there are several bookauthors per book, but one and only one AUTHOR per BOOKAUTHOR.
	Hence, in order to manage the "the current node the last one generated by the template" case, we have to do it outside the AUTHOR template.
	For ROLE, this is the same principle.
	-->
	<xsl:template match="lib:BOOKAUTHOR">
		
		<xsl:variable name="id_author" select="@idAuthorRef"/>
		

		<xsl:text>{</xsl:text>
		
		<xsl:apply-templates select="//lib:AUTHOR[@idAuthor=$id_author]"/>
		
		<xsl:text>"Roles": [ </xsl:text>
			<xsl:apply-templates select="lib:ROLE"/>
		<xsl:text> ]</xsl:text>
		
		<xsl:choose>
			<xsl:when test="position()!=last()">
				<xsl:text>},</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>}</xsl:text>
			</xsl:otherwise>
		</xsl:choose>

	</xsl:template>
	

  	<xsl:template match="lib:AUTHOR">
		<xsl:text>"idAuthor": "</xsl:text><xsl:value-of select="@idAuthor"/> <xsl:text>",</xsl:text>
		<xsl:text>"Lastname": "</xsl:text><xsl:value-of select="lib:LASTNAME"/> <xsl:text>",</xsl:text>
		<xsl:text> "Firstname": "</xsl:text><xsl:value-of select="lib:FIRSTNAME"/> <xsl:text>",</xsl:text>		
	</xsl:template>
	
	
  	<xsl:template match="lib:ROLE">
		<xsl:text>"</xsl:text><xsl:value-of select="."/>
		<xsl:choose>
			<xsl:when test="position()!=last()">
				<xsl:text>",</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>"</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
  
</xsl:stylesheet>
