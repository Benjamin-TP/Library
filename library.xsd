<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
 <!--
I used https://www.liquid-technologies.com/online-xsd-to-xml-converter to generate a sample XML
To validate: https://www.freeformatter.com/xml-validator-xsd.html
XMLTools extension for Visual Studio Code

Comments for the report
  - AUTHOR in AUTHORS for a sake of readiness
  - borrow info: where? In the books, to keep consistency with the way its done
  - borrow info: a dedicated element; may or may not be available
  - all the refkeys are under the book node
  - Books then series outside. info repeated (editor, etc) but can change authors (e.g. with Largo Winch)
  - minOccurs, maxOccurs always specified, for sake of readiness
  - BOOKAUTHOR / ROLE: on BOOK, not AUTHOR level because an AUTHOR can switch roles (e.g. morris, goscinny, uderzo)
  - BOOKAUTHOR / ROLE - choice made: several ROLE may be used for the same author (usual for the comics)
  - BOOKAUTHOR / ROLE: minOccurs = 0 because it is useless for novels, for example


Comments related to the informations about the borrowings (NB: "BORROWABLE" is a neologism)
  - BORROWABLE: a boolean attached to the BOOK.
  there is still room to enhance it, e.g. two fields 
  (one for "already borrowed", another one for "not borrowable yet")
  - We could also add a field "Reserved" + position in the list
  - BORROWER contains a list of a borrows/refkey to the BOOK; idBook created for that purpose.
  I cannot use xs:assert with XSD 1.0, hence I didnt find any perfect solution.
  MAX number of books: in the BORROWER info (limitation on the list) rather than from the book
  NROFBOOKS removed from the BOORROWER info: it can be deducted from the above list
  - BORROWINFO removed from the BOOK; only two columns remain under BOOK: BORROWDATE and RETURNDATE
  Still not the perfect solution, but the other was: BORROWINFO shared by BOOK and BORROWER; 
  - bookseries and comicbookseries not merged despite they are very similar: still useful in a real library; the other option would be to flag them using the book format 
  - regex for date: \d{4}-\d{2}-\d{2} customDateType: similar to what we saw in the course, but with yyyy-mm-dd instead
Still to transfomr to integer for comparison in the xslt (1.0)
  - ISBN - in BOOK but will always be useless for the newspaper
  Disadvantage of having all elements in BOOK
   regex for ISBN: (\d{3}-|)\d{1}-\d{2}-\d{6}-\d{1} (works for ISBN-10 and ISBN-13)
  - ISSN : in NEWSPAPERSERIE (I understood that it is linked to the serie itself)
  regex for ISSN: ISSN \d{4}-\d{3}(\d|X) (with ISSN inside!)

TODO
   - minOccurs, maxOccurs on the elements
  - Element +  ref vs element in the sequence only and that's it
  - keys and keyref paths edited like I did for BOOKAUTHOR?
  - control on the max number of books? Per book type?

  - add simpletype for restrictions on size of string elements
  - check integer elements as well  

  - to complete editor and theme lists
  - to create a big XML

  - by default, an attribute is optional, hence use="required" added if necessary
  - check if <xs:all> can be useful (each element appears 0 or 1 time, in any order) -> no.

  - Namespace

  -nb: sequence - 22.06.21 - it appears that the order is important
  -an integer element cannot be empty (I faced that when adding NROFBORROWS)

To-do xslt
- Books per borrower
- Book per author (XML?)
- Books not yet returned

-->
  <!--LIBRARY
      This element contains the whole database (it is its root node - "schema element")
  -->
 	<xs:element name="LIBRARY" type="libraryType">


    <!--key of BOOK / reffering key on BORROWERS/BORROWER/BORROWINGS/BORROWING-->
    <xs:key name="bookKey">
			<xs:selector xpath=".//BOOK"/>
			<xs:field xpath="@idBook"/>
		</xs:key>
    <xs:keyref name="borrowingToBook" refer="bookKey">
      <xs:selector xpath=".//BORROWING"/>
			<xs:field xpath="@idBookRef"/>
		</xs:keyref>

    <!--key of author / reffering key on BOOK/BOOKAUTHORS/BOOKAUTHOR-->
    <xs:key name="authorKey">
			<xs:selector xpath="AUTHORS/AUTHOR"/>
			<xs:field xpath="@idAuthor"/>
		</xs:key>
    <xs:keyref name="bookToAuthor" refer="authorKey">
			<!--<xs:selector xpath="BOOKS/BOOK/BOOKAUTHORS/BOOKAUTHOR"/>-->
      <xs:selector xpath=".//BOOKAUTHOR"/>
			<xs:field xpath="@idAuthorRef"/>
		</xs:keyref>

    <!--key of BOOKSERIE / refkey on BOOKSER-->
    <xs:key name="bookSerieKey">
			<xs:selector xpath="BOOKSERIES/BOOKSERIE"/>
			<xs:field xpath="@idBS"/>
		</xs:key>
    <xs:keyref name="bookSerToBookSerie" refer="bookSerieKey">
			<xs:selector xpath="BOOKS/BOOK/BOOKSER"/>
			<xs:field xpath="@idBSRef"/>
		</xs:keyref>

    <!--key of COMICBOOKSERIE / refkey on COMICBOOKSER-->
    <xs:key name="comicBookSerieKey">
			<xs:selector xpath="COMICBOOKSERIES/COMICBOOKSERIE"/>
			<xs:field xpath="@idCBS"/>
		</xs:key>
    <xs:keyref name="comicBookSerToComicBookSerie" refer="comicBookSerieKey">
			<xs:selector xpath="BOOKS/BOOK/COMICBOOKSER"/>
			<xs:field xpath="@idCBSRef"/>
		</xs:keyref>

    <!--key of NEWSPAPERSERIE / refkey on NEWSPAPERSER-->
    <xs:key name="newspaperSerieKey">
			<xs:selector xpath="NEWSPAPERSERIES/NEWSPAPERSERIE"/>
			<xs:field xpath="@idNWS"/>
		</xs:key>
    <xs:keyref name="newspaperSerToNewspaperSerie" refer="newspaperSerieKey">
			<xs:selector xpath="BOOKS/BOOK/NEWSPAPERSER"/>
			<xs:field xpath="@idNWSRef"/>
		</xs:keyref>

    <!--key of BORROWER / refkey on BORROWEDBY-->
    <!-- BORROWEDBY deactivated
    <xs:key name="borrowerKey">
			<xs:selector xpath="BORROWERS/BORROWER"/>
			<xs:field xpath="@idBorrower"/>
		</xs:key>
    <xs:keyref name="borrowedByToBorrower" refer="borrowerKey">
			<xs:selector xpath="BOOKS/BOOK/BORROWINFO/BORROWEDBY"/>
			<xs:field xpath="@idBorrowerRef"/>
		</xs:keyref>
    -->

  </xs:element>

  <!--
    LIBRARY: Contains
    - List of books: it contains all the books (book, comic, newspaper)
    - List of authors
    - List of borrowers

    Elements which contain lists:
    - BD series
    - book series
    - newspaper series

    To be confirmed:
    - (Newspapers) List of frequencies
    - List of editors
    - List of themes
    - List of book types (BD, books, newspapers)
    - List of target readers
  -->
  <xs:complexType name="libraryType">
		<xs:sequence>
      <!--By default, minOccurs and maxOccurs equal to 1, hence not specified
       minOccurs="1" maxOccurs="unbounded"
      -->
      <!--List of Books, comic, newspaper-->
			<xs:element name="BOOKS" type="booksType"/>

      <!--List of borrowers-->
      <xs:element name="BORROWERS" type="borrowersType"/>

      <!--Series elements-->
      <xs:element name="BOOKSERIES" type="bookSeriesType"/>
      <xs:element name="COMICBOOKSERIES" type="comicBookSeriesType"/>
      <xs:element name="NEWSPAPERSERIES" type="newspaperSeriesType"/>

      <!--List of authors
      22.06.17 changed: list removed (used in the BOOKS element instead)
      replaced with AUTHOR one by one instead
      -->
			<xs:element name="AUTHORS" type="authorsType"/>

		</xs:sequence>
	</xs:complexType>

  <xs:complexType name="booksType">
		<xs:sequence>
			<xs:element name="BOOK" type="bookType" minOccurs="0" maxOccurs="unbounded"/>
      <!--<xs:element ref="BOOK" minOccurs="0" maxOccurs="unbounded"/>-->
		</xs:sequence>
	</xs:complexType>

  <xs:complexType name="authorsType">
		<xs:sequence>
			<xs:element name="AUTHOR" type="authorType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

  <xs:complexType name="borrowersType">
		<xs:sequence>
			<xs:element name="BORROWER" type="borrowerType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>


  <xs:complexType name="bookType">
		<xs:sequence>
      <!--minOccurs and maxOccurs at 1 by default, hence no need to specify them-->
      <!--For the book parameters: simpleType defined (with restriction on the values)
      Theme/ThemeID
      TargetReader/
      Editor/
      BookType/editor
      -->
      <xs:element name="TITLE" type="xs:string"/>
      <xs:element name="DESCRIPTION" type="xs:string"/>
      <xs:element name="ISBN" type="ISBNType" minOccurs="0"/> <!--Not mandatory for newspapers-->

      <!--Book parameters-->
      <xs:element name="BOOKFORMAT" type="bookFormatType"/>
      <xs:element name="THEME" type="themeType"/>
      <xs:element name="TARGETREADER" type="targetReaderType"/>
      <xs:element name="EDITOR" type="editorType"/>

      <xs:element name="RELEASEDATE" type="customDateType"/>
      <xs:element name="PURCHASEDATE" type="customDateType"/>

      <!--BookAuthors-->
      <xs:element name="BOOKAUTHORS" type="bookAuthorsType"/>
      <!--Series elements
      minOccurs, maxOccurs : 1 by default
      Some books are "one-shot" hence minOccurs="0"
      -->
      <xs:choice minOccurs="0">
        <xs:element name="BOOKSER" type="bookSerType"/>
        <xs:element name="COMICBOOKSER" type="comicBookSerType"/>
        <xs:element name="NEWSPAPERSER" type="newspaperSerType"/>
      </xs:choice>

      <!--BORROWABLE
      not borrowable for two reasons
      - for read-here only (e.g. for newspapers released recently)
      - already borrowed by someone
      -->
      <xs:element name="BORROWABLE" type="xs:boolean"/>

      <!--BORROWINFO contains the information related to the borrow of the book
      <xs:element name="BORROWINFO" type="borrowInfoType" minOccurs="0"/>-->
      <!--The below dates can be null in case the book is not currently borrowed-->
      <xs:element name="BORROWDATE" type="customDateType"/>
      <xs:element name="RETURNDATE" type="customDateType"/>
      
      <!--Number of borrows
      Outside the BORROWINFO element because it is not the same level
      - BORROWINFO is for the current borrow status
      - NROFBORROWS is for the history of the borrowals
      -->
      <xs:element name="NROFBORROWS" type="xs:integer" minOccurs="0"/>

		</xs:sequence>

    <xs:attribute name="idBook" type="xs:integer" use="required"/>
	</xs:complexType>

  <!--BookAuthors
  List which contains BookAuthor
  Each BookAuthor refers to an Author
  -->
  <xs:complexType name="bookAuthorsType">
		<xs:sequence>
      <xs:element name="BOOKAUTHOR" type="bookAuthorType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

  <!--BookAuthor: 
  - one ROLE element for the role in the creation (writer, illustrator...)
  - one attribute for the reference to Author-->
  <xs:complexType name="bookAuthorType">
    <xs:sequence>
      <xs:element name="ROLE" type="roleType" minOccurs="0" maxOccurs="3"/>
    </xs:sequence>
		<xs:attribute name='idAuthorRef' type='xs:integer' use="required"/>
	</xs:complexType>

  <!--roleType used by bookAuthorType-->
  <xs:simpleType name="roleType">
    <xs:restriction base="xs:string">
        <xs:enumeration value="Novelist"/><!--Romancier-->
        <xs:enumeration value="Writer"/><!--Ecrivain - more "generalist"-->
        <xs:enumeration value="Scriptwriter"/><!--Scenariste-->
        <xs:enumeration value="Illustrator"/><!--Dessins-->
        <xs:enumeration value="Colourist"/><!--Coloriste-->
    </xs:restriction>
  </xs:simpleType>

  <!--BORROWINFO contains the information related to the borrow of the book
  I separated it because of the dependency: we have all of them or we dont have any one
  No need for minOccurs/maxOccurs here
  -->
  <!--
  <xs:complexType name="borrowInfoType">
		<xs:sequence>
      <xs:element name="BORROWEDBY" type="borrowedByType"/>
      <xs:element name="BORROWDATE" type="customDateType"/>
      <xs:element name="RETURNDATE" type="customDateType"/>
    </xs:sequence>
	</xs:complexType>-->


  <!--Complex types for the link between book and the series-->
  <!--The three following elements are in an BOOK element
  bookSerType refers to a bookSerieType (idBSref to idBS)
  comicBookSerType refers to a comicBookSerieType (idCBSref to idCBS)
  newspaperSerType refers to a newspaperSerieType (idNWSref to idNWS)
  -->
  <xs:complexType name="bookSerType">
		<xs:attribute name='idBSRef' type='xs:integer'/>
	</xs:complexType>
  <xs:complexType name="comicBookSerType">
		<xs:attribute name='idCBSRef' type='xs:integer'/>
	</xs:complexType>
  <xs:complexType name="newspaperSerType">
		<xs:attribute name='idNWSRef' type='xs:integer'/>
	</xs:complexType>

  <!--Theme type with restriction / pattern (or restriction / enumeration)
  Same for TargetReader, Editor, BookFormat
  -->
  <xs:simpleType name="bookFormatType">
    <xs:restriction base="xs:string">
        <xs:enumeration value="Book"/>
        <xs:enumeration value="Comic"/>
        <xs:enumeration value="Newspaper"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="themeType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="History"/>
      <xs:enumeration value="Politics"/>
      <xs:enumeration value="Novel"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="targetReaderType">
    <xs:restriction base="xs:string">
      <xs:pattern value="0-3|4-6|7-11|12-15|Adult"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="editorType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Bayard Presse"/>
      <xs:enumeration value="Fleurus Presse"/>
      <xs:enumeration value="Grasset"/>
      <xs:enumeration value="Futuropolis"/>
      <xs:enumeration value="Aire libre"/>
      <xs:enumeration value="Dupuis"/>
      <xs:enumeration value="Fayard"/>
      <xs:enumeration value="Dargaud"/>
      <xs:enumeration value="Glénat"/>
    </xs:restriction>
  </xs:simpleType>

  <!--Author id-->
  <xs:complexType name="authorType">
		<xs:sequence>
      <xs:element name="FIRSTNAME" type="xs:string"/>
      <xs:element name="LASTNAME" type="xs:string"/>
      <xs:element name="BIRTHDATE" type="customDateType"/>
		</xs:sequence>
    <xs:attribute name="idAuthor" type="xs:integer" use="required"/>
	</xs:complexType>

  <xs:complexType name="borrowerType">
		<xs:sequence>
      <xs:element name="FIRSTNAME" type="xs:string"/>
      <xs:element name="LASTNAME" type="xs:string"/>
      <xs:element name="BIRTHDATE" type="customDateType"/>
      <xs:element name="BORROWINGS" type="borrowingsType"/>
		</xs:sequence>
    <xs:attribute name="idBorrower" type="xs:integer" use="required"/>
	</xs:complexType>

  <xs:complexType name="borrowingsType">
		<xs:sequence>
      <!--Max number of borrowings with maxOccurs-->
      <xs:element name="BORROWING" type="borrowingType" minOccurs="0" maxOccurs="10"/>
		</xs:sequence>
	</xs:complexType>

  <xs:complexType name="borrowingType">
		<xs:attribute name='idBookRef' type='xs:integer'/>
	</xs:complexType>

  <!--BORROWEDBY contained in the book
  <xs:complexType name="borrowedByType">
		<xs:attribute name='idBorrowerRef' type='xs:integer'/>
	</xs:complexType>-->
 
  <!--The BookSeries list containt BookSerie elements-->
  <xs:complexType name="bookSeriesType">
		<xs:sequence>
      <xs:element name="BOOKSERIE" type="bookSerieType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
  
  <!--BookSerie contained in the BookSeries list-->
  <xs:complexType name="bookSerieType">
		<xs:sequence>
      <xs:element name="TITLE" type="xs:string"/>
      <xs:element name="DESCRIPTION" type="xs:string"/>
      <xs:element name="NROFVOLUMES" type="xs:integer"/>
		</xs:sequence>
    <xs:attribute name="idBS" type="xs:integer" use="required"/>
	</xs:complexType>


  <!--The ComicBookSeries list containt BookSerie elements-->
  <xs:complexType name="comicBookSeriesType">
		<xs:sequence>
      <xs:element name="COMICBOOKSERIE" type="comicBookSerieType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
  
  <!--ComicBookSerie contained in the ComicBookSeries list-->
  <xs:complexType name="comicBookSerieType">
		<xs:sequence>
      <xs:element name="TITLE" type="xs:string"/>
      <xs:element name="DESCRIPTION" type="xs:string"/>
      <xs:element name="NROFVOLUMES" type="xs:integer"/>
		</xs:sequence>
    <xs:attribute name="idCBS" type="xs:integer" use="required"/>
	</xs:complexType>


  <!--The NewspaperSeries list contains NewspaperSerie elements-->
  <xs:complexType name="newspaperSeriesType">
		<xs:sequence>
      <xs:element name="NEWSPAPERSERIE" type="newspaperSerieType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>

  <xs:complexType name="newspaperSerieType">
		<xs:sequence>
      <xs:element name="ISSN" type="ISSNType"/>
      <xs:element name="TITLE" type="xs:string"/>
      <xs:element name="DESCRIPTION" type="xs:string"/>
      <xs:element name="NROFVOLUMES" type="xs:integer"/>
      <xs:element name="FREQUENCY" type="frequencyType"/>
		</xs:sequence>
    <xs:attribute name="idNWS" type="xs:integer" use="required"/>
	</xs:complexType>

  <!--Frequency types list for the newspaper-->
  <xs:simpleType name="frequencyType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Daily"/>
      <xs:enumeration value="Weekly"/>
      <xs:enumeration value="Fortnightly"/>
      <xs:enumeration value="Monthly"/>
      <xs:enumeration value="Bimonthly"/>
      <xs:enumeration value="Biannual"/>
      <xs:enumeration value="Annual"/>
    </xs:restriction>
  </xs:simpleType>


  <!--simpleType with restrictions for dates, ISBN and ISSN-->
  <!--customDateType: similar to what we saw in the course, but with yyyy-mm-dd instead
  It is be better for sorting by date in xslt transformation
  The pattern accepts empty dates
  -->
  <xs:simpleType name="customDateType">
    <xs:restriction base="xs:string">
      <xs:pattern value="(\d{4}-\d{2}-\d{2}|)"/>
    </xs:restriction>
  </xs:simpleType>

  <!--ISBN for the BOOK
  The pattern accepts empty ISBN (it is mandatory for a bookshop, but not for a library)-->
  <xs:simpleType name="ISBNType">
    <xs:restriction base="xs:string">
      <xs:pattern value="((\d{3}-|)\d{1}-\d{2}-\d{6}-\d{1}|)"/>
    </xs:restriction>
  </xs:simpleType>

  <!--ISSN for NEWSPAPERSERIE
  I chose to force filling the ISSN, since a newspaper always have one-->
  <xs:simpleType name="ISSNType">
    <xs:restriction base="xs:string">
      <xs:pattern value="ISSN \d{4}-\d{3}(\d|X)"/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>